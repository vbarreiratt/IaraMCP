#!/usr/bin/env python3
"""
IaraMCP - Servidor para Claude Desktop
Vers√£o espec√≠fica para Claude Desktop usando apenas FastMCP
"""

from fastmcp import FastMCP
from pathlib import Path
import json
import sys
import os
import asyncio
import time
import logging
from typing import Dict, List, Optional, Any

# Fun√ß√£o para detectar o modo de visualiza√ß√£o
def detectar_modo_visualizacao() -> str:
    """Detecta o modo de visualiza√ß√£o do ambiente."""
    if os.environ.get("IARAMCP_VIS_MODE") == "local":
        return "local"
    if os.environ.get("DISPLAY") or sys.platform in ("darwin", "win32"):
        return "local"
    return "web"

MODO_VISUALIZACAO = detectar_modo_visualizacao()

def definir_caminho_saida(nome_base: str, extensao: str = ".png") -> Optional[str]:
    if MODO_VISUALIZACAO == "local":
        return os.path.join("/Users/vitor/Desktop", f"{nome_base}{extensao}")
    else:
        return None

logger = logging.getLogger(__name__)

# PYTHONPATH is configured externally in Claude Desktop config

# Try to import modules with fallback
try:
    from iaramcp.audio.analysis import AudioAnalyzer
    from iaramcp.audio.utils import validate_audio_file, get_audio_info
    from iaramcp.audio.separation import SourceSeparator
    from iaramcp.ml.classifier import InstrumentClassifier
    from iaramcp.visualization.plots import AudioVisualizer
    from iaramcp.optimization.performance import PerformanceOptimizer
    AUDIO_ANALYSIS_AVAILABLE = True
    SOURCE_SEPARATION_AVAILABLE = True
    INSTRUMENT_CLASSIFICATION_AVAILABLE = True
    VISUALIZATION_AVAILABLE = True
    OPTIMIZATION_AVAILABLE = True
except ImportError:
    # Fallback classes with error messages
    def validate_audio_file(file_path):
        return {"valid": True, "format": "unknown", "duration": 0}
    
    def get_audio_info(file_path):
        return {"file": file_path, "error": "Audio analysis not available"}
    
    class AudioAnalyzer:
        async def analyze_basic(self, file_path):
            return {"error": "Audio analysis not available - missing dependencies"}
        async def analyze_complete(self, file_path):
            return {"error": "Audio analysis not available - missing dependencies"}
    
    class SourceSeparator:
        def __init__(self, model_name='htdemucs_ft', device='auto'):
            pass
        async def separate_audio(self, file_path, **kwargs):
            return {"error": "Source separation not available - missing dependencies"}
    
    class InstrumentClassifier:
        async def identify_instruments(self, file_path, **kwargs):
            return {"error": "Instrument classification not available - missing dependencies"}
    
    class AudioVisualizer:
        async def create_waveform(self, file_path, **kwargs):
            return {"error": "Visualization not available - missing dependencies"}
    
    class PerformanceOptimizer:
        def __init__(self, *args, **kwargs):
            pass
        def get_performance_stats(self):
            return {}
        def clear_cache(self):
            pass
    
    AUDIO_ANALYSIS_AVAILABLE = False
    SOURCE_SEPARATION_AVAILABLE = False
    INSTRUMENT_CLASSIFICATION_AVAILABLE = False
    VISUALIZATION_AVAILABLE = False
    OPTIMIZATION_AVAILABLE = False

# Initialize FastMCP for Claude Desktop
mcp = FastMCP("IaraMCP - An√°lise Musical das √Åguas")

# Global instances
analyzer = AudioAnalyzer()
separator = SourceSeparator()
classifier = InstrumentClassifier()
visualizer = AudioVisualizer()
optimizer = PerformanceOptimizer(enable_cache=True) if OPTIMIZATION_AVAILABLE else PerformanceOptimizer()

# =============================================================================
# FERRAMENTAS MCP
# =============================================================================

@mcp.tool()
def iara_despertar(mensagem: str = "Ol√°") -> str:
    """Despertar da Iara - Testa a conex√£o e verifica o status de todos os m√≥dulos do servidor IaraMCP."""
    analysis_status = "‚úÖ Fluindo" if AUDIO_ANALYSIS_AVAILABLE else "‚ö†Ô∏è Limitado"
    separation_status = "‚úÖ Fluindo" if SOURCE_SEPARATION_AVAILABLE else "‚ö†Ô∏è Limitado"
    classification_status = "‚úÖ Fluindo" if INSTRUMENT_CLASSIFICATION_AVAILABLE else "‚ö†Ô∏è Limitado"
    visualization_status = "‚úÖ Fluindo" if VISUALIZATION_AVAILABLE else "‚ö†Ô∏è Limitado"
    optimization_status = "‚úÖ Fluindo" if OPTIMIZATION_AVAILABLE else "‚ö†Ô∏è Limitado"
    return f"üßú‚Äç‚ôÄÔ∏è IaraMCP est√° despertando das √°guas musicais! An√°lise: {analysis_status}, Separa√ß√£o: {separation_status}, Classifica√ß√£o: {classification_status}, Visualiza√ß√£o: {visualization_status}, Otimiza√ß√£o: {optimization_status}. Mensagem: {mensagem}"

@mcp.tool()
async def iara_mergulhar_nas_ondas(caminho_arquivo: str, tipo_analise: str = "completa") -> dict:
    """
    Mergulhar nas Ondas Musicais - Executa an√°lise completa de caracter√≠sticas musicais (tempo, harmonia, espectro, ritmo) de arquivos de √°udio usando algoritmos avan√ßados.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        tipo_analise: Tipo de an√°lise ('basica' ou 'completa')
    
    Returns:
        An√°lise abrangente incluindo caracter√≠sticas temporais, espectrais, harm√¥nicas e r√≠tmicas
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        # Validate audio file first
        validation = validate_audio_file(caminho_arquivo)
        if not validation.get("valid", False):
            return {"erro": f"Arquivo de √°udio inv√°lido: {validation}"}
        
        # Get basic info
        file_info = get_audio_info(caminho_arquivo)
        
        if tipo_analise == "basica":
            result = await analyzer.analyze_basic(caminho_arquivo)
        else:
            result = await analyzer.analyze_complete(caminho_arquivo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "tipo_analise": tipo_analise,
            "file_info": file_info,
            "analysis": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na an√°lise musical: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
def iara_validar_cristais_sonoros(caminho_arquivo: str) -> dict:
    """
    Validar Cristais Sonoros - Verifica se um arquivo de √°udio √© v√°lido e extrai metadados b√°sicos (formato, dura√ß√£o, taxa de amostragem).
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
    
    Returns:
        Informa√ß√µes de valida√ß√£o e metadados do arquivo
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        validation = validate_audio_file(caminho_arquivo)
        file_info = get_audio_info(caminho_arquivo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "validacao": validation,
            "info_arquivo": file_info,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na valida√ß√£o: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_separar_instrumentos(caminho_arquivo: str, modelo: str = "htdemucs_ft") -> dict:
    """
    Separar Instrumentos - Separa e isola diferentes instrumentos/vozes de uma grava√ß√£o musical usando IA.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        modelo: Modelo de separa√ß√£o ('htdemucs_ft', 'htdemucs', 'mdx_extra')
    
    Returns:
        Arquivos separados por instrumento com an√°lise de qualidade
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await separator.separate_audio(caminho_arquivo, model_name=modelo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "modelo_usado": modelo,
            "separacao": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na separa√ß√£o de instrumentos: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_identificar_instrumentos(caminho_arquivo: str, confianca_minima: float = 0.7) -> dict:
    """
    Identificar Instrumentos - Identifica e classifica instrumentos presentes na grava√ß√£o usando ML.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        confianca_minima: Confian√ßa m√≠nima para classifica√ß√£o (0.0-1.0)
    
    Returns:
        Lista de instrumentos identificados com n√≠veis de confian√ßa
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await classifier.identify_instruments(caminho_arquivo, min_confidence=confianca_minima)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "confianca_minima": confianca_minima,
            "instrumentos": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na identifica√ß√£o de instrumentos: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_visualizar_ondas(caminho_arquivo: str, tipo_visualizacao: str = "waveform") -> dict:
    """
    Visualizar Ondas - Cria visualiza√ß√µes gr√°ficas do √°udio (waveform, espectrograma, etc).
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        tipo_visualizacao: Tipo ('waveform', 'spectrogram', 'chromagram', 'mfcc')
    
    Returns:
        Caminho para arquivo de visualiza√ß√£o gerada
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        output_path = definir_caminho_saida(f"iara_viz_{int(time.time())}", ".png")
        
        if tipo_visualizacao == "waveform":
            result = await visualizer.create_waveform(caminho_arquivo, output_path=output_path)
        elif tipo_visualizacao == "spectrogram":
            result = await visualizer.create_spectrogram(caminho_arquivo, output_path=output_path)
        elif tipo_visualizacao == "chromagram":
            result = await visualizer.create_chromagram(caminho_arquivo, output_path=output_path)
        elif tipo_visualizacao == "mfcc":
            result = await visualizer.create_mfcc(caminho_arquivo, output_path=output_path)
        else:
            return {"erro": f"Tipo de visualiza√ß√£o inv√°lido: {tipo_visualizacao}"}
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "tipo_visualizacao": tipo_visualizacao,
            "arquivo_saida": output_path,
            "resultado": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na visualiza√ß√£o: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_extrair_melodia(caminho_arquivo: str, algoritmo: str = "melodia") -> dict:
    """
    Extrair Melodia - Extrai a melodia principal do √°udio usando algoritmos avan√ßados.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        algoritmo: Algoritmo de extra√ß√£o ('melodia', 'crepe', 'pyin')
    
    Returns:
        Sequ√™ncia mel√≥dica extra√≠da com informa√ß√µes de pitch
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.extract_melody(caminho_arquivo, algorithm=algoritmo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "algoritmo": algoritmo,
            "melodia": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na extra√ß√£o de melodia: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_detectar_acordes(caminho_arquivo: str, modo: str = "deep_chroma") -> dict:
    """
    Detectar Acordes - Detecta progress√µes de acordes na m√∫sica usando an√°lise harm√¥nica.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        modo: Modo de detec√ß√£o ('deep_chroma', 'nnls_chroma', 'crf')
    
    Returns:
        Sequ√™ncia de acordes detectados com timestamps
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.detect_chords(caminho_arquivo, mode=modo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "modo": modo,
            "acordes": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na detec√ß√£o de acordes: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_analisar_ritmo(caminho_arquivo: str, incluir_downbeats: bool = True) -> dict:
    """
    Analisar Ritmo - Analisa estrutura r√≠tmica, tempo, beat tracking e patterns.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        incluir_downbeats: Se deve incluir detec√ß√£o de downbeats
    
    Returns:
        An√°lise r√≠tmica completa com BPM, beats e patterns
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.analyze_rhythm(caminho_arquivo, include_downbeats=incluir_downbeats)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "incluir_downbeats": incluir_downbeats,
            "analise_ritmica": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na an√°lise r√≠tmica: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_detectar_estrutura(caminho_arquivo: str, algoritmo: str = "laplacian") -> dict:
    """
    Detectar Estrutura - Detecta estrutura musical (verso, refr√£o, ponte, etc).
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        algoritmo: Algoritmo de segmenta√ß√£o ('laplacian', 'foote', 'olda')
    
    Returns:
        Segmentos estruturais da m√∫sica com labels
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.detect_structure(caminho_arquivo, algorithm=algoritmo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "algoritmo": algoritmo,
            "estrutura": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na detec√ß√£o de estrutura: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_analisar_timbre(caminho_arquivo: str, features: List[str] = None) -> dict:
    """
    Analisar Timbre - Analisa caracter√≠sticas timbr√≠sticas (MFCC, spectral features, etc).
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        features: Features a extrair ['mfcc', 'spectral_centroid', 'spectral_rolloff', 'zcr']
    
    Returns:
        An√°lise detalhada de caracter√≠sticas timbr√≠sticas
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        if features is None:
            features = ['mfcc', 'spectral_centroid', 'spectral_rolloff', 'zero_crossing_rate']
        
        result = await analyzer.analyze_timbre(caminho_arquivo, features=features)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "features": features,
            "analise_timbre": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na an√°lise de timbre: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_detectar_key(caminho_arquivo: str, algoritmo: str = "krumhansl") -> dict:
    """
    Detectar Tonalidade - Detecta a tonalidade principal da m√∫sica.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        algoritmo: Algoritmo de detec√ß√£o ('krumhansl', 'temperley', 'edma')
    
    Returns:
        Tonalidade detectada com n√≠vel de confian√ßa
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.detect_key(caminho_arquivo, algorithm=algoritmo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "algoritmo": algoritmo,
            "tonalidade": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na detec√ß√£o de tonalidade: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_analisar_emocao(caminho_arquivo: str, modelo: str = "valence_arousal") -> dict:
    """
    Analisar Emo√ß√£o - Analisa caracter√≠sticas emocionais da m√∫sica (val√™ncia, energia, etc).
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        modelo: Modelo de an√°lise ('valence_arousal', 'discrete_emotions', 'mood_classification')
    
    Returns:
        An√°lise emocional com m√©tricas de val√™ncia e arousal
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.analyze_emotion(caminho_arquivo, model=modelo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "modelo": modelo,
            "analise_emocional": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na an√°lise emocional: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_comparar_audios(arquivo1: str, arquivo2: str, metricas: List[str] = None) -> dict:
    """
    Comparar √Åudios - Compara similaridade entre dois arquivos de √°udio.
    
    Args:
        arquivo1: Caminho para o primeiro arquivo
        arquivo2: Caminho para o segundo arquivo
        metricas: M√©tricas de compara√ß√£o ['mfcc_similarity', 'chroma_similarity', 'spectral_similarity']
    
    Returns:
        An√°lise de similaridade com scores para diferentes aspectos
    """
    try:
        if not Path(arquivo1).exists():
            return {"erro": f"Primeiro arquivo n√£o encontrado: {arquivo1}"}
        if not Path(arquivo2).exists():
            return {"erro": f"Segundo arquivo n√£o encontrado: {arquivo2}"}
        
        if metricas is None:
            metricas = ['mfcc_similarity', 'chroma_similarity', 'spectral_similarity']
        
        result = await analyzer.compare_audio(arquivo1, arquivo2, metrics=metricas)
        
        return {
            "arquivo1": arquivo1,
            "arquivo2": arquivo2,
            "metricas": metricas,
            "similaridade": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na compara√ß√£o de √°udios: {str(e)}",
            "arquivos": [arquivo1, arquivo2]
        }

@mcp.tool()
async def iara_extrair_features_ml(caminho_arquivo: str, feature_set: str = "comprehensive") -> dict:
    """
    Extrair Features ML - Extrai features otimizadas para machine learning.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        feature_set: Conjunto de features ('basic', 'comprehensive', 'minimal')
    
    Returns:
        Conjunto de features vetorizadas para ML
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.extract_ml_features(caminho_arquivo, feature_set=feature_set)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "feature_set": feature_set,
            "features": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na extra√ß√£o de features ML: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_classificar_genero(caminho_arquivo: str, modelo: str = "deep_learning") -> dict:
    """
    Classificar G√™nero - Classifica o g√™nero musical usando machine learning.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        modelo: Modelo de classifica√ß√£o ('deep_learning', 'traditional_ml', 'ensemble')
    
    Returns:
        Classifica√ß√£o de g√™nero com probabilidades
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await classifier.classify_genre(caminho_arquivo, model=modelo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "modelo": modelo,
            "classificacao_genero": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na classifica√ß√£o de g√™nero: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_detectar_onset(caminho_arquivo: str, algoritmo: str = "default") -> dict:
    """
    Detectar Onset - Detecta in√≠cio de notas/eventos musicais.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        algoritmo: Algoritmo de detec√ß√£o ('default', 'energy', 'hfc', 'complex')
    
    Returns:
        Timestamps de onsets detectados
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.detect_onset(caminho_arquivo, algorithm=algoritmo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "algoritmo": algoritmo,
            "onsets": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na detec√ß√£o de onset: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_analisar_loudness(caminho_arquivo: str, standard: str = "lufs") -> dict:
    """
    Analisar Loudness - Analisa loudness usando padr√µes da ind√∫stria.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        standard: Padr√£o de medi√ß√£o ('lufs', 'rms', 'peak')
    
    Returns:
        An√°lise de loudness com m√©tricas da ind√∫stria
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.analyze_loudness(caminho_arquivo, standard=standard)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "standard": standard,
            "analise_loudness": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na an√°lise de loudness: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_segmentar_audio(caminho_arquivo: str, tipo_segmentacao: str = "auto") -> dict:
    """
    Segmentar √Åudio - Segmenta √°udio em se√ß√µes baseadas em mudan√ßas musicais.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        tipo_segmentacao: Tipo ('auto', 'fixed_duration', 'beat_sync', 'structure_based')
    
    Returns:
        Segmentos de √°udio com timestamps e caracter√≠sticas
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.segment_audio(caminho_arquivo, segmentation_type=tipo_segmentacao)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "tipo_segmentacao": tipo_segmentacao,
            "segmentos": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na segmenta√ß√£o de √°udio: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
async def iara_analisar_dinamica(caminho_arquivo: str, janela_tempo: float = 1.0) -> dict:
    """
    Analisar Din√¢mica - Analisa varia√ß√µes din√¢micas e din√¢mica temporal.
    
    Args:
        caminho_arquivo: Caminho para o arquivo de √°udio
        janela_tempo: Janela de tempo para an√°lise em segundos
    
    Returns:
        An√°lise de din√¢mica com varia√ß√µes temporais
    """
    try:
        if not Path(caminho_arquivo).exists():
            return {"erro": f"Arquivo n√£o encontrado: {caminho_arquivo}"}
        
        result = await analyzer.analyze_dynamics(caminho_arquivo, time_window=janela_tempo)
        
        return {
            "caminho_arquivo": caminho_arquivo,
            "janela_tempo": janela_tempo,
            "analise_dinamica": result,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na an√°lise de din√¢mica: {str(e)}",
            "caminho_arquivo": caminho_arquivo
        }

@mcp.tool()
def iara_otimizar_performance() -> dict:
    """
    Otimizar Performance - Limpa cache e otimiza performance do sistema.
    
    Returns:
        Status das opera√ß√µes de otimiza√ß√£o
    """
    try:
        optimizer.clear_cache()
        stats = optimizer.get_performance_stats()
        
        return {
            "operacao": "otimizacao_performance",
            "cache_limpo": True,
            "estatisticas": stats,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
    except Exception as e:
        return {
            "erro": f"Falha na otimiza√ß√£o: {str(e)}"
        }

@mcp.tool()
def iara_listar_ferramentas() -> dict:
    """
    Listar Ferramentas - Lista todas as ferramentas dispon√≠veis da Iara com suas descri√ß√µes tem√°ticas.
    
    Returns:
        Dicion√°rio com todas as ferramentas e suas capacidades
    """
    ferramentas = {
        "despertar": {"nome": "iara_despertar", "descricao": "Status do servidor e m√≥dulos"},
        "mergulhar_ondas": {"nome": "iara_mergulhar_nas_ondas", "descricao": "An√°lise musical completa"},
        "validar_cristais": {"nome": "iara_validar_cristais_sonoros", "descricao": "Valida√ß√£o de arquivos"},
        "separar_instrumentos": {"nome": "iara_separar_instrumentos", "descricao": "Separa√ß√£o de fontes"},
        "identificar_instrumentos": {"nome": "iara_identificar_instrumentos", "descricao": "Classifica√ß√£o de instrumentos"},
        "visualizar_ondas": {"nome": "iara_visualizar_ondas", "descricao": "Visualiza√ß√µes gr√°ficas"},
        "extrair_melodia": {"nome": "iara_extrair_melodia", "descricao": "Extra√ß√£o mel√≥dica"},
        "detectar_acordes": {"nome": "iara_detectar_acordes", "descricao": "An√°lise harm√¥nica"},
        "analisar_ritmo": {"nome": "iara_analisar_ritmo", "descricao": "An√°lise r√≠tmica"},
        "detectar_estrutura": {"nome": "iara_detectar_estrutura", "descricao": "Segmenta√ß√£o estrutural"},
        "analisar_timbre": {"nome": "iara_analisar_timbre", "descricao": "An√°lise timbr√≠stica"},
        "detectar_key": {"nome": "iara_detectar_key", "descricao": "Detec√ß√£o de tonalidade"},
        "analisar_emocao": {"nome": "iara_analisar_emocao", "descricao": "An√°lise emocional"},
        "comparar_audios": {"nome": "iara_comparar_audios", "descricao": "An√°lise de similaridade"},
        "extrair_features_ml": {"nome": "iara_extrair_features_ml", "descricao": "Features para ML"},
        "classificar_genero": {"nome": "iara_classificar_genero", "descricao": "Classifica√ß√£o de g√™nero"},
        "detectar_onset": {"nome": "iara_detectar_onset", "descricao": "Detec√ß√£o de onset"},
        "analisar_loudness": {"nome": "iara_analisar_loudness", "descricao": "An√°lise de loudness"},
        "segmentar_audio": {"nome": "iara_segmentar_audio", "descricao": "Segmenta√ß√£o de √°udio"},
        "analisar_dinamica": {"nome": "iara_analisar_dinamica", "descricao": "An√°lise din√¢mica"},
        "otimizar_performance": {"nome": "iara_otimizar_performance", "descricao": "Otimiza√ß√£o do sistema"}
    }
    
    return {
        "ferramentas_iara": ferramentas,
        "total_ferramentas": len(ferramentas),
        "status_modulos": {
            "audio_analysis": AUDIO_ANALYSIS_AVAILABLE,
            "source_separation": SOURCE_SEPARATION_AVAILABLE,
            "instrument_classification": INSTRUMENT_CLASSIFICATION_AVAILABLE,
            "visualization": VISUALIZATION_AVAILABLE,
            "optimization": OPTIMIZATION_AVAILABLE
        },
        "mensagem": "üßú‚Äç‚ôÄÔ∏è A Iara tem todas essas ferramentas m√°gicas para analisar as √°guas musicais!"
    }

if __name__ == "__main__":
    mcp.run()