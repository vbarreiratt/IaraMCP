{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(python test:*)",
      "Bash(pip install:*)",
      "Bash(python:*)",
      "Bash(PYTHONPATH=/Users/vitor/Desktop/analisemusicalavancado/src timeout 3s python -m iaramcp.server_simple)",
      "Bash(PYTHONPATH=./src python -c \"\nimport asyncio\nimport subprocess\nimport sys\nfrom pathlib import Path\n\nasync def test_server():\n    try:\n        # Start server process\n        process = subprocess.Popen(\n            [sys.executable, ''-m'', ''iaramcp.server_simple''],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            env={''PYTHONPATH'': ''./src''}\n        )\n        \n        # Wait a bit to see if it starts without immediate error\n        await asyncio.sleep(1)\n        \n        if process.poll() is None:\n            print(''✅ Server started successfully (still running)'')\n            process.terminate()\n            process.wait()\n            return True\n        else:\n            stdout, stderr = process.communicate()\n            print(f''❌ Server terminated immediately'')\n            if stdout:\n                print(f''STDOUT: {stdout}'')\n            if stderr:\n                print(f''STDERR: {stderr}'')\n            return False\n            \n    except Exception as e:\n        print(f''❌ Error testing server: {e}'')\n        return False\n\nasyncio.run(test_server())\n\")",
      "Bash(PYTHONPATH=./src timeout 3s python -c \"\nimport asyncio\nimport subprocess\nimport sys\nfrom pathlib import Path\n\nasync def test_server():\n    try:\n        # Start server process\n        process = subprocess.Popen(\n            [sys.executable, ''-m'', ''iaramcp.server_simple''],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            env={''PYTHONPATH'': ''./src''}\n        )\n        \n        # Wait a bit to see if it starts without immediate error\n        await asyncio.sleep(1)\n        \n        if process.poll() is None:\n            print(''✅ Server started successfully (still running)'')\n            process.terminate()\n            process.wait()\n            return True\n        else:\n            stdout, stderr = process.communicate()\n            print(f''❌ Server terminated immediately'')\n            if stdout:\n                print(f''STDOUT: {stdout}'')\n            if stderr:\n                print(f''STDERR: {stderr}'')\n            return False\n            \n    except Exception as e:\n        print(f''❌ Error testing server: {e}'')\n        return False\n\nasyncio.run(test_server())\n\")",
      "Bash(PYTHONPATH=./src python -c \"\nimport asyncio\nimport subprocess\nimport sys\nfrom pathlib import Path\n\nasync def test_server():\n    try:\n        # Start server process\n        process = subprocess.Popen(\n            [sys.executable, ''-m'', ''iaramcp.server_simple''],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            env={''PYTHONPATH'': ''./src''}\n        )\n        \n        # Wait a bit to see if it starts without immediate error\n        await asyncio.sleep(2)\n        \n        if process.poll() is None:\n            print(''✅ Server started successfully (still running)'')\n            process.terminate()\n            process.wait()\n            return True\n        else:\n            stdout, stderr = process.communicate()\n            print(f''❌ Server terminated immediately'')\n            if stdout:\n                print(f''STDOUT: {stdout}'')\n            if stderr:\n                print(f''STDERR: {stderr}'')\n            return False\n            \n    except Exception as e:\n        print(f''❌ Error testing server: {e}'')\n        return False\n\nasyncio.run(test_server())\n\")",
      "Bash(PYTHONPATH=./src python -c \"\nimport asyncio\nimport subprocess\nimport sys\nfrom pathlib import Path\n\nasync def test_server():\n    try:\n        # Start server process\n        process = subprocess.Popen(\n            [sys.executable, ''-m'', ''iaramcp.server_simple''],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            env={''PYTHONPATH'': ''./src''}\n        )\n        \n        # Wait a bit to see if it starts without immediate error\n        await asyncio.sleep(2)\n        \n        if process.poll() is None:\n            print(''✅ Server started successfully (still running)'')\n            process.terminate()\n            process.wait()\n            return True\n        else:\n            stdout, stderr = process.communicate()\n            print(f''❌ Server terminated immediately'')\n            if stdout:\n                print(f''STDOUT: {stdout}'')\n            if stderr:\n                print(f''STDERR: {stderr}'')\n            return False\n            \n    except Exception as e:\n        print(f''❌ Error testing server: {e}'')\n        return False\n\nasyncio.run(test_server())\n\")",
      "Bash(PYTHONPATH=./src /opt/anaconda3/bin/python -m iaramcp.server_simple)",
      "Bash(PYTHONPATH=./src python -c \"\nimport asyncio\nimport subprocess\nimport sys\nfrom pathlib import Path\n\nasync def test_server():\n    try:\n        # Start server process\n        process = subprocess.Popen(\n            [sys.executable, ''-m'', ''iaramcp.server_simple''],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            env={''PYTHONPATH'': ''./src''}\n        )\n        \n        # Wait a bit to see if it starts without immediate error\n        await asyncio.sleep(2)\n        \n        if process.poll() is None:\n            print(''✅ Server started successfully (still running)'')\n            process.terminate()\n            stdout, stderr = process.communicate()\n            if stderr:\n                print(f''STDERR: {stderr}'')\n            return True\n        else:\n            stdout, stderr = process.communicate()\n            print(f''❌ Server terminated immediately'')\n            if stdout:\n                print(f''STDOUT: {stdout}'')\n            if stderr:\n                print(f''STDERR: {stderr}'')\n            return False\n            \n    except Exception as e:\n        print(f''❌ Error testing server: {e}'')\n        return False\n\nasyncio.run(test_server())\n\")",
      "Bash(PYTHONPATH=./src python:*)",
      "Bash(pip show:*)",
      "Bash(ls:*)",
      "Bash(mv:*)",
      "Bash(PYTHONPATH=/Users/vitor/Desktop/analisemusicalavancado/src /opt/anaconda3/bin/python -c \"\nimport sys\nprint(''Python path:'', sys.executable)\ntry:\n    import iaramcp.server_fastmcp\n    print(''✅ iaramcp.server_fastmcp importado com sucesso!'')\nexcept Exception as e:\n    print(f''❌ Erro ao importar: {e}'')\n\")",
      "Bash(PYTHONPATH=/Users/vitor/Desktop/analisemusicalavancado/src /opt/anaconda3/bin/python -c \"\nimport sys\nprint(''✅ Testando servidor IaraMCP com novos nomes temáticos...'')\ntry:\n    import iaramcp.server_fastmcp\n    print(''✅ IaraMCP server_fastmcp importado com sucesso!'')\n    \n    # Test if we can instantiate the FastMCP app\n    from iaramcp.server_fastmcp import mcp\n    print(''✅ FastMCP app instanciada com sucesso!'')\n    \n    # List tools to verify new names\n    print(''✅ Servidor carregado - ferramentas com nomes temáticos da Iara prontas!'')\n    \nexcept Exception as e:\n    print(f''❌ Erro ao testar servidor: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH:*)",
      "Bash(rm:*)",
      "Bash(find:*)",
      "WebFetch(domain:smithery.ai)",
      "WebFetch(domain:github.com)",
      "Bash(docker build:*)",
      "Bash(docker run:*)",
      "Bash(curl:*)",
      "Bash(docker logs:*)",
      "Bash(docker stop:*)",
      "Bash(git checkout:*)",
      "Bash(echo:*)",
      "Bash(kill:*)"
    ],
    "deny": []
  }
}